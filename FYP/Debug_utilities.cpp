#include "Debug_utilities.h"


Debug_utilities::Debug_utilities(string fen_string):Engine(fen_string)
{
	
}


Debug_utilities::~Debug_utilities()
{
}

void Debug_utilities::run_make_unmake_debug()
{
	while (true) {
		printAsciiBitboard(board_state, *white_player, *black_player);
		Player* current_player = this->white_turn ? white_player : black_player;
		Player* opponent_player = !this->white_turn ? white_player : black_player;

		current_player->generate_moves();
		current_player->print_moves();
		bool correct_input = false;
		do {
			string input;
			cout << "MAKE OR UNMAKE MOVE (make/unmake): ";
			cin >> input;
			if (input == "make") {
				Move moves = current_player->get_moves();
				if (moves.get_length()) {
					this->make_move(moves[0], current_player,opponent_player);
					this->white_turn = !white_turn;
					correct_input = true;
				}
				else
					cout << "No moves left" << endl;
			}
			else if (input == "unmake") {
				unmake_move();
				correct_input = true;
			}
			else {
				cout << "Please enter 'make' or 'unmake' : " << endl;
			}
		} while (!correct_input);
		system("cls");
	}
}

void Debug_utilities::engine_normal_run()
{
	run();
}

int Debug_utilities::perft_debug(int depth)
{
	if (depth == 0)
		return 1;
	Player* current_player = this->white_turn ? white_player : black_player;
	Player* opponent_player = !this->white_turn ? white_player : black_player;

	current_player->generate_moves();
	int nodes = 0;
	for (uint32_t move : current_player->get_moves()) {
		make_move(move, current_player,opponent_player);
		this->white_turn = !white_turn;
		nodes += perft_debug(depth - 1);
		unmake_move();
	}
	return nodes;
}
int index = 0;
bool print_ = false;
uint64_t debug_data[] = {
	18444210833278959615,
18444210833279024895,
18444210799053504255,
18443930457813942015,
18443929362597281535,
18443650082348859135,
18443647891915538175,
18443089331418693375,
18443084950552051455,
18439724825837698815,
18439707302371131135,
18435238818396372735,
18435203771463237375,
18426266803513720575,
18426196709647449855,
18408322773748416255,
18408182586015874815,
18300096744714796799,
18300100043249680127,
18302347445016854271,
13832559999223725823,
13832665552339992319,
18155980457135701759,
18155980458201054975,
18155980594566266623,
18155998049313357567,
18158232256940998399,
17867758877068623615,
17870001880789286655,
17293541128485863167,
18444210833295736575,
18444210799070215935,
18443930457830653695,
18443929362613993215,
18443650082365570815,
18443647891932249855,
18443089331435405055,
18443084950568763135,
18439724825854410495,
18439707302387842815,
18435238818413084415,
18435203771479949055,
18426266803530432255,
18426196709664161535,
18408322773765127935,
18408182586032586495,
18300096744731508479,
18300100043266391807,
18302347445033565951,
13832559999240437503,
13832665552356703999,
18155980457152413439,
18155980458217766655,
18155980594582978303,
18155998049330069247,
18158232256957710079,
17867758877085335295,
17870001880805998335,
17293541128502574847,
18444210833279090175,
18444210799053569535,
18443930457814007295,
18443929362597346815,
18443650082348924415,
18443647891915603455,
18443089331418758655,
18443084950552116735,
18439724825837764095,
18439707302371196415,
18435238818396438015,
18435203771463302655,
18426266803513785855,
18426196709647515135,
18408322773748481535,
18408182586015940095,
18300096744714862079,
18300100043249745407,
18302347445016919551,
13832559999223791103,
13832665552340057599,
18155980457135767039,
18155980458201120255,
18155980594566331903,
18155998049313422847,
18158232256941063679,
17867758877068688895,
17870001880789351935,
17293541128485928447,
18444210833312513535,
18444210799086992895,
18443930457847430655,
18443929362630770175,
18443650082382347775,
18443647891949026815,
18443089331452182015,
18443084950585540095,
18439724825871187455,
18439707302404619775,
18435238818429861375,
18435203771496726015,
18426266803547209215,
18426196709680938495,
18408322773781904895,
18408182586049363455,
18300096744748285439,
18300100043283168767,
18302347445050342911,
13832559999257214463,
13832665552373480959,
18155980457169190399,
18155980458234543615,
18155980594599755263,
18155998049346846207,
18158232256974487039,
17867758877102112255,
17870001880822775295,
17293541128519351807,
18444210833279220735,
18444210799053700095,
18443930457814137855,
18443929362597477375,
18443650082349054975,
18443647891915734015,
18443089331418889215,
18443084950552247295,
18439724825837894655,
18439707302371326975,
18435238818396568575,
18435203771463433215,
18426266803513916415,
18426196709647645695,
18408322773748612095,
18408182586016070655,
18300096744714992639,
18300100043249875967,
18302347445017050111,
13832559999223921663,
13832665552340188159,
18155980457135897599,
18155980458201250815,
18155980594566462463,
18155998049313553407,
18158232256941194239,
17867758877068819455,
17870001880789482495,
17293541128486059007,
18444210833346067455,
18444210799120546815,
18444210798986329087,
18443930457880984575,
18443929362664324095,
18443650082415901695,
18443647891982580735,
18443089331485735935,
18443084950619094015,
18439724825904741375,
18439707302438173695,
18435238818463415295,
18435203771530279935,
18426266803580763135,
18426196709714492415,
18408322773815458815,
18408182586082917375,
18300096744781839359,
18300100043316722687,
18302347445083896831,
13832559999290768383,
13832665552407034879,
18155980457202744319,
18155980458268097535,
18155980594633309183,
18155998049380400127,
18158232257008040959,
17867758877135666175,
17870001880856329215,
17293541128552905727,
18444210833279481855,
18444210799053961215,
18443930457814398975,
18443929362597738495,
18443650082349316095,
18443647891915995135,
18443089331419150335,
18443084950552508415,
18439724825838155775,
18439707302371588095,
18435238818396829695,
18435203771463694335,
18426266803514177535,
18426196709647906815,
18408322773748873215,
18408182586016331775,
18300096744715253759,
18300100043250137087,
18302347445017311231,
13832559999224182783,
13832665552340449279,
18155980457136158719,
18155980458201511935,
18155980594566723583,
18155998049313814527,
18158232256941455359,
17867758877069080575,
17870001880789743615,
17293541128486320127,
18444210833413175295,
18443930457948092415,
18443929362731431935,
18443650082483009535,
18443647892049688575,
18443089331552843775,
18443084950686201855,
18439724825971849215,
18439707302505281535,
18435238818530523135,
18435203771597387775,
18426266803647870975,
18426196709781600255,
18408322773882566655,
18408182586150025215,
18300096744848947199,
18300100043383830527,
18302347445151004671,
13832559999357876223,
13832665552474142719,
18155980457269852159,
18155980458335205375,
18155980594700417023,
18155998049447507967,
18158232257075148799,
17867758877202774015,
17870001880923437055,
17293541128620013567,
18444210833280004095,
18444210799054483455,
18443930457814921215,
18443929362598260735,
18443650082349838335,
18443647891916517375,
18443089331419672575,
18443084950553030655,
18439724825838678015,
18439707302372110335,
18435238818397351935,
18435203771464216575,
18426266803514699775,
18426196709648429055,
18408322773749395455,
18408182586016854015,
18300096744715775999,
18300100043250659327,
18302347445017833471,
13832559999224705023,
13832665552340971519,
18155980457136680959,
18155980458202034175,
18155980594567245823,
18155998049314336767,
18158232256941977599,
17867758877069602815,
17870001880790265855,
17293541128486842367,
18444210833547390975,
18444210799321870335,
18444210799187652607,
18443930458082308095,
18443929362865647615,
18443650082617225215,
18443647892183904255,
18443089331687059455,
18443084950820417535,
18439724826106064895,
18439707302639497215,
18435238818664738815,
18435203771731603455,
18426266803782086655,
18426196709915815935,
18408322774016782335,
18408182586284240895,
18300096744983162879,
18300100043518046207,
18302347445285220351,
13832559999492091903,
13832665552608358399,
18155980457404067839,
18155980458469421055,
18155980594834632703,
18155998049581723647,
18158232257209364479,
17867758877336989695,
17870001881057652735,
17293541128754229247,
18444210833281048575,
18444210799055527935,
18443930457815965695,
18443929362599305215,
18443650082350882815,
18443647891917561855,
18443089331420717055,
18443084950554075135,
18439724825839722495,
18439707302373154815,
18435238818398396415,
18435203771465261055,
18426266803515744255,
18426196709649473535,
18408322773750439935,
18408182586017898495,
18300096744716820479,
18300100043251703807,
18302347445018877951,
13832559999225749503,
13832665552342015999,
18155980457137725439,
18155980458203078655,
18155980594568290303,
18155998049315381247,
18158232256943022079,
17867758877070647295,
17870001880791310335,
17293541128487886847,
18444210833815822335,
18444210799590301695,
18443930458350739455,
18443929363134078975,
18443650082885656575,
18443647892452335615,
18443089331955490815,
18443084951088848895,
18439724826374496255,
18439707302907928575,
18435238818933170175,
18435203772000034815,
18426266804050518015,
18426196710184247295,
18408322774285213695,
18408182586552672255,
18300096745251594239,
18300100043786477567,
18302347445553651711,
13832559999760523263,
13832665552876789759,
18155980457672499199,
18155980458737852415,
18155980595103064063,
18155998049850155007,
18158232257477795839,
17867758877605421055,
17870001881326084095,
17293541129022660607,
18444210833283137535,
18444210799057616895,
18443930457818054655,
18443929362601394175,
18443650082352971775,
18443647891919650815,
18443089331422806015,
18443084950556164095,
18439724825841811455,
18439707302375243775,
18435238818400485375,
18435203771467350015,
18426266803517833215,
18426196709651562495,
18408322773752528895,
18408182586019987455,
18300096744718909439,
18300100043253792767,
18302347445020966911,
13832559999227838463,
13832665552344104959,
18155980457139814399,
18155980458205167615,
18155980594570379263,
18155998049317470207,
18158232256945111039,
17867758877072736255,
17870001880793399295,
17293541128489975807,
18444210834352685055,
18444210800127164415,
18443930458887602175,
18443929363670941695,
18443650083422519295,
18443647892989198335,
18443089332492353535,
18443084951625711615,
18439724826911358975,
18439707303444791295,
18435238819470032895,
18435203772536897535,
18426266804587380735,
18426196710721110015,
18408322774822076415,
18408182587089534975,
18300096745788456959,
18300100044323340287,
18302347446090514431,
13832560000297385983,
13832665553413652479,
18155980458200973311,
18155980595639926783,
18155998050387017727,
18158232258014658559,
17867758878142283775,
17870001881862946815,
17293541129559523327,
18444210833287315455,
18444210799061794815,
18443930457822232575,
18443929362605572095,
18443650082357149695,
18443647891923828735,
18443089331426983935,
18443084950560342015,
18439724825845989375,
18439707302379421695,
18435238818404663295,
18435203771471527935,
18426266803522011135,
18426196709655740415,
18408322773756706815,
18408182586024165375,
18300096744723087359,
18300100043257970687,
18302347445025144831,
13832559999232016383,
13832665552348282879,
18155980457135603711,
18155980458209345535,
18155980594574557183,
18155998049321648127,
18158232256949288959,
17867758877076914175,
17870001880797577215,
17293541128494153727,
18444210835426410495,
18444210801200889855,
18443930459961327615,
18443929364744667135,
18443650084496244735,
18443647894062923775,
18443089333566078975,
18443084952699437055,
18439724827985084415,
18439707304518516735,
18435238820543758335,
18435203773610622975,
18426266805661106175,
18426196711794835455,
18408322775895801855,
18408182588163260415,
18300096746862182399,
18300100045397065727,
18302347447164239871,
13832560001371111423,
13832665554487377919,
18155980459283087359,
18155980460348440575,
18155980596713652223,
18155998051460743167,
18158232259088383999,
17867758879216009215,
17870001882936672255,
17293541130633248767,
18444210833279025149,
18444210799053504509,
18443930457813942269,
18443929362597281789,
18443650082348859389,
18443647891915538429,
18443089331418693629,
18443084950552051709,
18439724825837699069,
18439707302371131389,
18435238818396372989,
18435203771463237629,
18426266803513720829,
18426196709647450109,
18408322773748416509,
18408182586015875069,
18300096744714797053,
18300100043249680381,
18302347445016854525,
13832559999223726077,
13832665552339992573,
18155980457135702013,
18155980458201055229,
18155980594566266877,
18155998049313357821,
18158232256940998653,
17867758877068623869,
17870001880789286909,
17293541128485863421,
18444210833279221757,
18444210799053701117,
18443930457814138877,
18443929362597478397,
18443650082349055997,
18443647891915735037,
18443089331418890237,
18443084950552248317,
18439724825837895677,
18439707302371327997,
18435238818396569597,
18435203771463434237,
18426266803513917437,
18426196709647646717,
18408322773748613117,
18408182586016071677,
18300096744714993661,
18300100043249876989,
18302347445017051133,
13832559999223922685,
13832665552340189181,
18155980457135898621,
18155980458201251837,
18155980594566463485,
18155998049313554429,
18158232256941195261,
17867758877068820477,
17870001880789483517,
17293541128486060029,
18444210833281056703,
18444210799055536063,
18443930457815973823,
18443929362599313343,
18443650082350890943,
18443647891917569983,
18443089331420725183,
18443084950554083263,
18439724825839730623,
18439707302373162943,
18435238818398404543,
18435203771465269183,
18426266803515752383,
18426196709649481663,
18408322773750448063,
18408182586017906623,
18300096744716828607,
18300100043251711935,
18302347445018886079,
13832559999225757631,
13832665552342024127,
18155980457137733567,
18155980458203086783,
18155980594568298431,
18155998049315389375,
18158232256943030207,
17867758877070655423,
17870001880791318463,
17293541128487894975,
18444210833287348159,
18444210799061827519,
18443930457822265279,
18443929362605604799,
18443650082357182399,
18443647891923861439,
18443089331427016639,
18443084950560374719,
18439724825846022079,
18439707302379454399,
18435238818404695999,
18435203771471560639,
18426266803522043839,
18426196709655773119,
18408322773756739519,
18408182586024198079,
18300096744723120063,
18300100043258003391,
18302347445025177535,
13832559999232049087,
13832665552348315583,
18155980457135636415,
18155980458209378239,
18155980594574589887,
18155998049321680831,
18158232256949321663,
17867758877076946879,
17870001880797609919,
17293541128494186431,
};
int data_index = 0;
void Debug_utilities::custom_perft_debug(int depth)
{
	if (depth == 0) {
		nodes++;
		//if(print_)
		//	printAsciiBitboard(this->board_state, *this->white_player, *this->black_player);
		return;
	}
	Player * current_player = this->white_turn ? white_player : black_player;
	Player* opponent_player = !this->white_turn ? white_player : black_player;
	current_player->generate_moves();
	if (print_) {
		int my_nodes = nodes;
		uint64_t debug_data_value = debug_data[data_index++];
		if (this->board_state!=debug_data_value) {
			printBitboard(debug_data_value);
			printAsciiBitboard(this->board_state, *this->white_player, *this->black_player);
			current_player->print_moves();
			cout << endl;
		}
	}
	index++;
	get_move_attr_count(current_player->get_moves());
	for (uint32_t move : current_player->get_moves()) {
		make_move(move, current_player,opponent_player);
		this->white_turn = !white_turn;
		custom_perft_debug(depth - 1);
		unmake_move();
	}
}

void Debug_utilities::perform_custom_perft(int depth)
{
	Player* current_player = this->white_turn ? white_player : black_player;
	Player* opponent_player = !this->white_turn ? white_player : black_player;
	current_player->generate_moves();
	for (uint32_t move : current_player->get_moves()) {
		make_move(move, current_player, opponent_player);
		this->white_turn = !white_turn;
		long cummulative_nodes = nodes;
		if (Move::decode_move(move, MOVE_DECODE_ATTRIBUTES::SOURCE_SQUARE) == d2 && Move::decode_move(move, MOVE_DECODE_ATTRIBUTES::TARGET_SQUARE) == d4) {
			print_ = true;
			/*printAsciiBitboard(this->board_state, *this->white_player, *this->black_player);
			current_player->print_moves();*/
		}
		else print_ = false;
		custom_perft_debug(depth - 1);
		cout << data_index << endl;
		long old_nodes = nodes - cummulative_nodes;
		unmake_move();
		cout << "Move : " << str_positions[Move::decode_move(move, MOVE_DECODE_ATTRIBUTES::SOURCE_SQUARE)] << str_positions[Move::decode_move(move, MOVE_DECODE_ATTRIBUTES::TARGET_SQUARE)] << "\tNodes : " << old_nodes << endl;
	}
	//custom_perft_debug(depth);
	cout << "DEPTH : " << depth << endl;
	cout << "NODES : " << nodes << endl;
	cout << "CAPTURES : " << captures << endl;
	cout << "ENPASSANTS : " << enpassants << endl;
	cout << "CASTLES : " << castles << endl;
	cout << "PROMOTIONS : " << promotions << endl;
	cout << "TOTAL MOVES : " << index << endl;
}

void Debug_utilities::perform_move_generation_debug(int times)
{
	for (int i = 0; i < times; i++)
		white_player->generate_moves();
}

void Debug_utilities::print_board_for_fen()
{
	printAsciiBitboard(this->board_state, *this->white_player, *this->black_player);
}

void Debug_utilities::print_bitboard_for_fen()
{
	printBitboard(this->board_state);
}

void Debug_utilities::print_bitboard_for_piece(PieceName name)
{
	printBitboard(this->white_player->get_player_pieces()[name]);
}

void Debug_utilities::get_move_attr_count(Move moves)
{
	for (uint32_t move : moves) {
		if (Move::decode_move(move, CAPTURE_FLAG))
			captures++;
		else if (Move::decode_move(move, PROMOTION_PIECE_NAME) != NONE)
			promotions++;
		else if (Move::decode_move(move, EN_PASSANT_FLAG))
			enpassants++;
		else if (Move::decode_move(move, CASTLE_FLAG))
			castles++;
	}
}
