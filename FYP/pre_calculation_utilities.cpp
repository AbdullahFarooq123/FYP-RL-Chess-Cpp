#include "pre_calculation_utilities.h"
void init_precalculation_utilities() {
	init_squares();
	init_directional_rays();
	//init_pawn_attacks();
	//init_knight_attacks();
	//init_king_attacks();
	//init_rook_attack_mask();
	//init_bishop_attack_mask();
	//init_magic_numbers();
	init_slider_attacks(true);
	init_slider_attacks(false);
}
//|--------------------------------------------------------|
//|********************************************************|
//|				   General Utilities					   |
//|********************************************************|
//|--------------------------------------------------------|
uint64_t rook_attacks[64] = {
	0b0000000000000001000000010000000100000001000000010000000101111110,
	0b0000000000000010000000100000001000000010000000100000001001111100,
	0b0000000000000100000001000000010000000100000001000000010001111010,
	0b0000000000001000000010000000100000001000000010000000100001110110,
	0b0000000000010000000100000001000000010000000100000001000001101110,
	0b0000000000100000001000000010000000100000001000000010000001011110,
	0b0000000001000000010000000100000001000000010000000100000000111110,
	0b0000000010000000100000001000000010000000100000001000000001111110,
	0b0000000000000001000000010000000100000001000000010111111000000000,
	0b0000000000000010000000100000001000000010000000100111110000000000,
	0b0000000000000100000001000000010000000100000001000111101000000000,
	0b0000000000001000000010000000100000001000000010000111011000000000,
	0b0000000000010000000100000001000000010000000100000110111000000000,
	0b0000000000100000001000000010000000100000001000000101111000000000,
	0b0000000001000000010000000100000001000000010000000011111000000000,
	0b0000000010000000100000001000000010000000100000000111111000000000,
	0b0000000000000001000000010000000100000001011111100000000100000000,
	0b0000000000000010000000100000001000000010011111000000001000000000,
	0b0000000000000100000001000000010000000100011110100000010000000000,
	0b0000000000001000000010000000100000001000011101100000100000000000,
	0b0000000000010000000100000001000000010000011011100001000000000000,
	0b0000000000100000001000000010000000100000010111100010000000000000,
	0b0000000001000000010000000100000001000000001111100100000000000000,
	0b0000000010000000100000001000000010000000011111101000000000000000,
	0b0000000000000001000000010000000101111110000000010000000100000000,
	0b0000000000000010000000100000001001111100000000100000001000000000,
	0b0000000000000100000001000000010001111010000001000000010000000000,
	0b0000000000001000000010000000100001110110000010000000100000000000,
	0b0000000000010000000100000001000001101110000100000001000000000000,
	0b0000000000100000001000000010000001011110001000000010000000000000,
	0b0000000001000000010000000100000000111110010000000100000000000000,
	0b0000000010000000100000001000000001111110100000001000000000000000,
	0b0000000000000001000000010111111000000001000000010000000100000000,
	0b0000000000000010000000100111110000000010000000100000001000000000,
	0b0000000000000100000001000111101000000100000001000000010000000000,
	0b0000000000001000000010000111011000001000000010000000100000000000,
	0b0000000000010000000100000110111000010000000100000001000000000000,
	0b0000000000100000001000000101111000100000001000000010000000000000,
	0b0000000001000000010000000011111001000000010000000100000000000000,
	0b0000000010000000100000000111111010000000100000001000000000000000,
	0b0000000000000001011111100000000100000001000000010000000100000000,
	0b0000000000000010011111000000001000000010000000100000001000000000,
	0b0000000000000100011110100000010000000100000001000000010000000000,
	0b0000000000001000011101100000100000001000000010000000100000000000,
	0b0000000000010000011011100001000000010000000100000001000000000000,
	0b0000000000100000010111100010000000100000001000000010000000000000,
	0b0000000001000000001111100100000001000000010000000100000000000000,
	0b0000000010000000011111101000000010000000100000001000000000000000,
	0b0000000001111110000000010000000100000001000000010000000100000000,
	0b0000000001111100000000100000001000000010000000100000001000000000,
	0b0000000001111010000001000000010000000100000001000000010000000000,
	0b0000000001110110000010000000100000001000000010000000100000000000,
	0b0000000001101110000100000001000000010000000100000001000000000000,
	0b0000000001011110001000000010000000100000001000000010000000000000,
	0b0000000000111110010000000100000001000000010000000100000000000000,
	0b0000000001111110100000001000000010000000100000001000000000000000,
	0b0111111000000001000000010000000100000001000000010000000100000000,
	0b0111110000000010000000100000001000000010000000100000001000000000,
	0b0111101000000100000001000000010000000100000001000000010000000000,
	0b0111011000001000000010000000100000001000000010000000100000000000,
	0b0110111000010000000100000001000000010000000100000001000000000000,
	0b0101111000100000001000000010000000100000001000000010000000000000,
	0b0011111001000000010000000100000001000000010000000100000000000000,
	0b0111111010000000100000001000000010000000100000001000000000000000
};
uint64_t rook_attacks_table[64][4096];
uint64_t bishop_attacks[64] = {
	0b0000000001000000001000000001000000001000000001000000001000000000,
	0b0000000000000000010000000010000000010000000010000000010000000000,
	0b0000000000000000000000000100000000100000000100000000101000000000,
	0b0000000000000000000000000000000001000000001000100001010000000000,
	0b0000000000000000000000000000000000000010010001000010100000000000,
	0b0000000000000000000000000000001000000100000010000101000000000000,
	0b0000000000000000000000100000010000001000000100000010000000000000,
	0b0000000000000010000001000000100000010000001000000100000000000000,
	0b0000000000100000000100000000100000000100000000100000000000000000,
	0b0000000001000000001000000001000000001000000001000000000000000000,
	0b0000000000000000010000000010000000010000000010100000000000000000,
	0b0000000000000000000000000100000000100010000101000000000000000000,
	0b0000000000000000000000000000001001000100001010000000000000000000,
	0b0000000000000000000000100000010000001000010100000000000000000000,
	0b0000000000000010000001000000100000010000001000000000000000000000,
	0b0000000000000100000010000001000000100000010000000000000000000000,
	0b0000000000010000000010000000010000000010000000000000001000000000,
	0b0000000000100000000100000000100000000100000000000000010000000000,
	0b0000000001000000001000000001000000001010000000000000101000000000,
	0b0000000000000000010000000010001000010100000000000001010000000000,
	0b0000000000000000000000100100010000101000000000000010100000000000,
	0b0000000000000010000001000000100001010000000000000101000000000000,
	0b0000000000000100000010000001000000100000000000000010000000000000,
	0b0000000000001000000100000010000001000000000000000100000000000000,
	0b0000000000001000000001000000001000000000000000100000010000000000,
	0b0000000000010000000010000000010000000000000001000000100000000000,
	0b0000000000100000000100000000101000000000000010100001000000000000,
	0b0000000001000000001000100001010000000000000101000010001000000000,
	0b0000000000000010010001000010100000000000001010000100010000000000,
	0b0000000000000100000010000101000000000000010100000000100000000000,
	0b0000000000001000000100000010000000000000001000000001000000000000,
	0b0000000000010000001000000100000000000000010000000010000000000000,
	0b0000000000000100000000100000000000000010000001000000100000000000,
	0b0000000000001000000001000000000000000100000010000001000000000000,
	0b0000000000010000000010100000000000001010000100000010000000000000,
	0b0000000000100010000101000000000000010100001000100100000000000000,
	0b0000000001000100001010000000000000101000010001000000001000000000,
	0b0000000000001000010100000000000001010000000010000000010000000000,
	0b0000000000010000001000000000000000100000000100000000100000000000,
	0b0000000000100000010000000000000001000000001000000001000000000000,
	0b0000000000000010000000000000001000000100000010000001000000000000,
	0b0000000000000100000000000000010000001000000100000010000000000000,
	0b0000000000001010000000000000101000010000001000000100000000000000,
	0b0000000000010100000000000001010000100010010000000000000000000000,
	0b0000000000101000000000000010100001000100000000100000000000000000,
	0b0000000001010000000000000101000000001000000001000000001000000000,
	0b0000000000100000000000000010000000010000000010000000010000000000,
	0b0000000001000000000000000100000000100000000100000000100000000000,
	0b0000000000000000000000100000010000001000000100000010000000000000,
	0b0000000000000000000001000000100000010000001000000100000000000000,
	0b0000000000000000000010100001000000100000010000000000000000000000,
	0b0000000000000000000101000010001001000000000000000000000000000000,
	0b0000000000000000001010000100010000000010000000000000000000000000,
	0b0000000000000000010100000000100000000100000000100000000000000000,
	0b0000000000000000001000000001000000001000000001000000001000000000,
	0b0000000000000000010000000010000000010000000010000000010000000000,
	0b0000000000000010000001000000100000010000001000000100000000000000,
	0b0000000000000100000010000001000000100000010000000000000000000000,
	0b0000000000001010000100000010000001000000000000000000000000000000,
	0b0000000000010100001000100100000000000000000000000000000000000000,
	0b0000000000101000010001000000001000000000000000000000000000000000,
	0b0000000001010000000010000000010000000010000000000000000000000000,
	0b0000000000100000000100000000100000000100000000100000000000000000,
	0b0000000001000000001000000001000000001000000001000000001000000000
};
uint64_t bishop_attacks_table[64][512];
uint64_t square_bitmask[64];
uint64_t directional_rays[9][64];
int count_set_bits(uint64_t bitboard) {
	int count = 0;
	while (bitboard) {
		bitboard &= bitboard - 1;
		count++;
	}
	return count;
}
int get_least_bit_index(uint64_t bitboard) {
	if (!bitboard)
		return -1;
	else
		return log2(bitboard & -(long long)bitboard);
}
void init_squares() {
	for (int position = a8; position <= h1; position++)
		square_bitmask[position] = (bitmask(position));
}
void init_directional_rays() {
	for (int direction = NORTH; direction <= NOT_ALLIGNED; direction++) {
		for (int position = a8; position <= h1; position++) {
			uint64_t my_position = bitmask(position);
			uint64_t ray = 0ull;
			switch (direction)
			{
			case NORTH:
				while (my_position & ~top_edge)
					ray |= (my_position >>= 8);
				break;
			case NORTH_EAST:
				while (my_position & ~(top_edge | right_edge))
					ray |= (my_position >>= 7);
				break;
			case EAST:
				while (my_position & ~right_edge)
					ray |= (my_position <<= 1);
				break;
			case SOUTH_EAST:
				while (my_position & ~(bottom_edge | right_edge))
					ray |= (my_position <<= 9);
				break;
			case SOUTH:
				while (my_position & ~bottom_edge)
					ray |= (my_position <<= 8);
				break;
			case SOUTH_WEST:
				while (my_position & ~(bottom_edge | left_edge))
					ray |= (my_position <<= 7);
				break;
			case WEST:
				while (my_position & ~left_edge)
					ray |= (my_position >>= 1);
				break;
			case NORTH_WEST:
				while (my_position & ~(top_edge | left_edge))
					ray |= (my_position >>= 9);
				break;
			}
			directional_rays[direction][position] = ray;
		}
	}
}

uint64_t setOccupancy(int index, int attacksCount, uint64_t pieceAttacksMap) {
	uint64_t occupancy = 0ull;
	for (int i = 0; i < attacksCount; i++) {
		int bit_index = get_least_bit_index(pieceAttacksMap);
		pieceAttacksMap &= pieceAttacksMap - 1;
		if (index & (1 << i)) {
			occupancy |= (bitmask(bit_index));
		}
	}
	return occupancy;
}
void init_slider_attacks(bool bishop) {
	for (int i = a8; i <= h1; i++) {
		uint64_t attack_mask = bishop?bishop_attacks[i] : rook_attacks[i];
		int relevent_bits = count_set_bits(attack_mask);
		int occupancy_indices = (1 << relevent_bits);
		for (int index = 0; index < occupancy_indices; index++) {
			if (bishop) {
				uint64_t occupancy = setOccupancy(index, relevent_bits, attack_mask);
				int magic_index = (occupancy * bishop_magic_number[i]) >> (64-bishop_attack_count[i]);
				bishop_attacks_table[i][magic_index] = get_bishop_attak_mask_inc_end_blockers(bitmask(i), occupancy);
			}
			else {
				uint64_t occupancy = setOccupancy(index, relevent_bits, attack_mask);
				int magic_index = (occupancy * rook_magic_number[i]) >> (64 - rook_attack_count[i]);
				rook_attacks_table[i][magic_index] = get_rook_attak_mask_inc_end_blockers(bitmask(i), occupancy);
			}
		}
	}
}
//|--------------------------------------------------------|
//|********************************************************|
//|				       Random Numbers					   |
//|********************************************************|
//|--------------------------------------------------------|
unsigned int random_state = 1804289383;
uint32_t get_32b_rand_no() {
	unsigned int number = random_state;
	number ^= number << 13;
	number ^= number >> 17;
	number ^= number << 5;
	random_state = number;
	return random_state;
}
uint64_t get_64b_rand_no() {
	uint64_t n1 = ((uint64_t)get_32b_rand_no()) & 0xFFFF;
	uint64_t n2 = ((uint64_t)get_32b_rand_no()) & 0xFFFF;
	uint64_t n3 = ((uint64_t)get_32b_rand_no()) & 0xFFFF;
	uint64_t n4 = ((uint64_t)get_32b_rand_no()) & 0xFFFF;
	return n1 | (n2 << 16) | (n3 << 32) | (n4 << 48);
}
//|--------------------------------------------------------|
//|********************************************************|
//|				       Magic Numbers					   |
//|********************************************************|
//|--------------------------------------------------------|
uint64_t bishop_magic_number[64] = {
	0b0000000001000000000001000000100001000100010000000100000010000100,
	0b0000000000100000000001000010000010001010000000000100001000001000,
	0b0000000000010000000110010000000001000001000010000000001000000010,
	0b0000000100001000000001100000100001000101000001000010000000010000,
	0b0000010110000001000100000100000110000000100000000000001000010000,
	0b0010000100010010000010000000010001000110001000000000000000010000,
	0b0001000010000000100000100000100000100000000001100000001000010000,
	0b0000001111000000100000001000010000010000001000100000001000000000,
	0b0000000000000100000001010000010000000100010001000000010000000100,
	0b0000000000000000000000100001000000000001010000100000000010001000,
	0b0010010011010000000010000000100000000001000010000010000100000010,
	0b0000000000000001000000100000101000001010000000100000010000000000,
	0b0000000000000000000001000000001100001000001000000000010000000010,
	0b0000000000000100000000010001000000000010000100000000100000000000,
	0b0000010000000001010010000100000100000100000100000100000000000101,
	0b0000100000000001000000010000010000000010000000100000001000000000,
	0b0000000001000000000000100001000011000011100010000000000100000000,
	0b0000010000000100000000100010000000100100000100001000001000000000,
	0b0000100000010000000000011000001000000000001000000100000100000010,
	0b0000000000000100000000000010100000000001101000000010000000000011,
	0b0000000010000101000001000000100000100000000010000000010000000000,
	0b1000000100000001000000101100100000001000100010000000010000000000,
	0b0000000000001110100100000000010000010000100010000100100000000000,
	0b1000000000000010000000100000010010000000100001000000000100000010,
	0b0000001000100000001000000000100001100101000010010000001000000001,
	0b0010000000010000000100000000101000000010000000100001001000000010,
	0b0000000101010010000001001000010000001000000000100010010000000001,
	0b0000000000100000000010000000000000000010000010000001000100010000,
	0b0100000000000001000000000001000000100001000000000100000000000000,
	0b1000000000000000010000000100000000001010000000010001000000000010,
	0b0000000011100100000000000100000010000001000000010001000000000010,
	0b0000000000011100000000000100000000000001000000010010000010000000,
	0b1000000000000100001000000000100101100010101000000000001000100000,
	0b1000010000100010000100000000001000001000010100000000001000000010,
	0b0010000000000000010000000010001000000000001100000000110000001000,
	0b1000011001000110000000100000000010000000000010000000000010000000,
	0b1000000000000010000010100000001000000000000100000000100000001000,
	0b0010000000010000000000000100100010000000000100010001000000000000,
	0b0110001000110000000000001010000010000000000000010001010000000000,
	0b0100001000000000100011000000001101000000001000001001001000000010,
	0b0000001000001001000110001000001001000000000000000001000000000000,
	0b0100000000000100000010001010100010000100000000000001100000000000,
	0b0000000000010001000001000000000010100110000010000000010000000000,
	0b0001100001000000000001100000101001000100000000100000100000000000,
	0b0000000010010000000010000000000100000100000000000000000001000001,
	0b0000001000000001000000010001000000000000100000001000000100000001,
	0b0001101000100010000010000000100000000101000001001111000010000000,
	0b1000000000010010000000100000011000000000001000010001001000010010,
	0b0000010100000000100001100001000000010001001001000000000000000000,
	0b0000000110000000100000000110000100001000001000000000100000000000,
	0b0100000000000000000000100000111000000001000001000000000001000100,
	0b0011000000000000000000000010011000010000010001000000000000001010,
	0b0000100000000010001001000001000100000010000000100000000000000010,
	0b0000000000100000100100000110000001100001001000010000000000000001,
	0b0101101010000100100001000001000000000100000000010000001100010000,
	0b0000000000000100000000010000100000000001000000010001110000000100,
	0b0000000000001010000000010000000100001001010100000010001000000000,
	0b0000000000000000000000000100101000000010000000010010000000000000,
	0b0101000000000010000000010000000100000000100110001011000000101000,
	0b1000000001000000000000000010100000010001000001000000100100000000,
	0b0000000000101000000000000000000000010000000000100000001000000100,
	0b0000011000000000000000000010000000100000001011010000001001000000,
	0b1000100100011000100001000100100001000010000010000010001000000000,
	0b0100000000010000000000010001000000101001000000100000000000100000
};
uint64_t rook_magic_number[64] = {
	0b1000101010000000000100000100000000000000100000000000000000100000,
	0b0000000101000000000000000010000000000000000100000000000001000000,
	0b0000001010000000000110001000000010100000000000010111000000000001,
	0b0000000100000000000010000001000000000001000000000000010000100000,
	0b0000001000000000000000100000000000010000000010000000010000100000,
	0b0000001100000000000111000000000000000010000000010000000000001000,
	0b1000010010000000000000001000000000000010000000000000000100000000,
	0b0010000010000000000010001000000000000100010000000010100100000000,
	0b0000000000000000100000000000000010011000001000000100000000000000,
	0b0010000000100100010000000001000000000000001000000000000001000000,
	0b0000000100000000100000000010000000000000100000000001000000000000,
	0b0000000100100000100000000000100000000000100000000001000000000000,
	0b0000001000001000100000001000000010001000000000000000010000000000,
	0b0000000000000010100000000010001000000000100000000000010000000000,
	0b0010001000000000100000000000000100000000000000100000000010000000,
	0b0000100000000001000000000000000001100000100000100001000100000000,
	0b0000000010000000000001000100000000000110010000100010000000000000,
	0b0000000100000000100000001000000000100000000000000100000000000000,
	0b0001001000010000100010100000000000010000001000000100001000000000,
	0b0000000101000000100001001000000000010000000000000000100000000010,
	0b0000010010000001100000101000000000010100000000000010100000000000,
	0b1000000010010100000000000100000000000010000000000100000100000000,
	0b0100000000010000000001000000000000010000000000010000100000000010,
	0b0000000000000000000000100000000000001000100000000110000100000100,
	0b0000000100000000010000000000000010000000001000001000000000000000,
	0b0010000001000000000000000010000100100000000010000001000000000000,
	0b0000000000100001001000000000011010000000000100000000000010000001,
	0b0000000000100000000100000000000010000000000010000000000010000000,
	0b0000000000000010000000000000101000000000001000000000010000010000,
	0b0000000000000000000000100000000010000000100000000000010000000000,
	0b0000000010000000000010001000010000000000000100000000000100000010,
	0b0000000010000000000000000100011000000000000001000010100010000001,
	0b0100000001000000000000001000000001000000100000000000000000100000,
	0b0000010001000000000000000011000000000000001000000000100000000001,
	0b0000000000000100001000000000000000010001000000000100010100000000,
	0b0000000110001000000000100000000000010000000100000000000100000000,
	0b0000000000010100100000000000010000000001100000000010100000000000,
	0b0010000010000000000001000000000010000000100000000000001000000000,
	0b0000000100100100000010000000001000000100000000000001000000000001,
	0b0000001000000000000001000110010100000010000000000000010010000100,
	0b0000010010000000010000000000000010000000000010001000000000100000,
	0b0001000000000000010000100010000000010000000000110100000000000000,
	0b0000000000110000001000000000000100000000000100010000000001000000,
	0b0000000000000000000100000000000000100001000000010000000000001001,
	0b0010000000000010000010000000000100000000000100010000000000000100,
	0b0000001000000010000000001000000000000100000000001000000000000010,
	0b0000000000100000000000100000000000000100000000010000000100000000,
	0b0010000001001000010001000000000001000000100000100000000000000001,
	0b0000000100000001000000000010001000000000010000001000001000000000,
	0b0000000001000000100000000010000000000000010000000001000010000000,
	0b0100000000001000000101000010000000000100010000010000000100000000,
	0b0000001000000110000010000010000011000000000100100000001000000000,
	0b0000000000000001000000000001000000000100000010000000000100000000,
	0b0000001000001100000000100000000010000000000001000000000010000000,
	0b0010100100110101011000010000100000110000000000100010010000000000,
	0b0000000001000100010001000000000001000001000000001001001000000000,
	0b0000001010000000000000000001000001000000100000000010000100000001,
	0b0010000100000000000110010000000001000000000000000010000010000101,
	0b1000000011000000000010000100000100000000000100000010000000000001,
	0b0100000000100100000010000001000000000001000000000000010000100001,
	0b0000000000000010000000000011000010100000001001000100100001110010,
	0b0000000000010010000000000001000000001000010000010100010000000010,
	0b0000001000000000011000010000010010010000000010100000100000000100,
	0b0000000000000001000000000100000010000001000000000010010000000010
};
void init_magic_numbers() {
	for (int i = a8; i <= h1; i++)
		rook_magic_number[i] = find_magic_number(bitmask(i), rook_attack_count[i], false);
	//for (int i = a8; i <= h1; i++)
	//	bishop_magic_number[i] = find_magic_number(bitmask(i), bishop_attack_count[i], true);
}
uint64_t generate_magic_number() {
	return get_64b_rand_no()& get_64b_rand_no()& get_64b_rand_no();
}
uint64_t find_magic_number(uint64_t piece_position, int relevent_occupancy_bits, bool bishop) {
	uint64_t occupancies[4096];
	uint64_t attacks[4096];
	uint64_t used_attacks[4096];
	uint64_t attack_mask = bishop ? get_bishop_attak_mask_exc_ends(piece_position) : get_rook_attak_mask_exc_ends(piece_position);
	int occupancy_indicies = (1 << relevent_occupancy_bits);
	for (int index = 0; index < occupancy_indicies; index++) {
		occupancies[index] = setOccupancy(index, relevent_occupancy_bits, attack_mask);
		attacks[index] = bishop ? get_bishop_attak_mask_inc_end_blockers(piece_position, occupancies[index]) : get_rook_attak_mask_inc_end_blockers(piece_position, occupancies[index]);
	}
	for (int random_count = 0; random_count < 100000000; random_count++) {
		uint64_t magic_number = generate_magic_number();
		uint64_t num_to_multiply = 0xFF00000000000000;
		if (count_set_bits((attack_mask * magic_number) & num_to_multiply) < 6){
			std::cout << "CONTINUE" << std::endl;
			continue;
		}
		memset(used_attacks, 0ULL, sizeof(used_attacks));
		int index, fail;
		// test magic index loop
		for (index = 0, fail = 0; !fail && index < occupancy_indicies; index++) {
			int magic_index = (int)((occupancies[index] * magic_number) >> (64 - relevent_occupancy_bits));
			uint64_t v1 = occupancies[index] * magic_number;
			uint64_t v3 = 64-relevent_occupancy_bits;
			if (used_attacks[magic_index] == 0ull)
				used_attacks[magic_index] = attacks[index];
			else if (used_attacks[magic_index] != attacks[index])
				fail = true;
		}
		if (!fail)
			return magic_number;
	}
	return 0ull;
}
//|--------------------------------------------------------|
//|********************************************************|
//|							Pawns						   |
//|********************************************************|
//|--------------------------------------------------------|
uint64_t pawn_attack_maps[2][64] = {
	{
		0b0000000000000000000000000000000000000000000000000000001000000000,
		0b0000000000000000000000000000000000000000000000000000010100000000,
		0b0000000000000000000000000000000000000000000000000000101000000000,
		0b0000000000000000000000000000000000000000000000000001010000000000,
		0b0000000000000000000000000000000000000000000000000010100000000000,
		0b0000000000000000000000000000000000000000000000000101000000000000,
		0b0000000000000000000000000000000000000000000000001010000000000000,
		0b0000000000000000000000000000000000000000000000000100000000000000,
		0b0000000000000000000000000000000000000000000000100000000000000000,
		0b0000000000000000000000000000000000000000000001010000000000000000,
		0b0000000000000000000000000000000000000000000010100000000000000000,
		0b0000000000000000000000000000000000000000000101000000000000000000,
		0b0000000000000000000000000000000000000000001010000000000000000000,
		0b0000000000000000000000000000000000000000010100000000000000000000,
		0b0000000000000000000000000000000000000000101000000000000000000000,
		0b0000000000000000000000000000000000000000010000000000000000000000,
		0b0000000000000000000000000000000000000010000000000000000000000000,
		0b0000000000000000000000000000000000000101000000000000000000000000,
		0b0000000000000000000000000000000000001010000000000000000000000000,
		0b0000000000000000000000000000000000010100000000000000000000000000,
		0b0000000000000000000000000000000000101000000000000000000000000000,
		0b0000000000000000000000000000000001010000000000000000000000000000,
		0b0000000000000000000000000000000010100000000000000000000000000000,
		0b0000000000000000000000000000000001000000000000000000000000000000,
		0b0000000000000000000000000000001000000000000000000000000000000000,
		0b0000000000000000000000000000010100000000000000000000000000000000,
		0b0000000000000000000000000000101000000000000000000000000000000000,
		0b0000000000000000000000000001010000000000000000000000000000000000,
		0b0000000000000000000000000010100000000000000000000000000000000000,
		0b0000000000000000000000000101000000000000000000000000000000000000,
		0b0000000000000000000000001010000000000000000000000000000000000000,
		0b0000000000000000000000000100000000000000000000000000000000000000,
		0b0000000000000000000000100000000000000000000000000000000000000000,
		0b0000000000000000000001010000000000000000000000000000000000000000,
		0b0000000000000000000010100000000000000000000000000000000000000000,
		0b0000000000000000000101000000000000000000000000000000000000000000,
		0b0000000000000000001010000000000000000000000000000000000000000000,
		0b0000000000000000010100000000000000000000000000000000000000000000,
		0b0000000000000000101000000000000000000000000000000000000000000000,
		0b0000000000000000010000000000000000000000000000000000000000000000,
		0b0000000000000010000000000000000000000000000000000000000000000000,
		0b0000000000000101000000000000000000000000000000000000000000000000,
		0b0000000000001010000000000000000000000000000000000000000000000000,
		0b0000000000010100000000000000000000000000000000000000000000000000,
		0b0000000000101000000000000000000000000000000000000000000000000000,
		0b0000000001010000000000000000000000000000000000000000000000000000,
		0b0000000010100000000000000000000000000000000000000000000000000000,
		0b0000000001000000000000000000000000000000000000000000000000000000,
		0b0000001000000000000000000000000000000000000000000000000000000000,
		0b0000010100000000000000000000000000000000000000000000000000000000,
		0b0000101000000000000000000000000000000000000000000000000000000000,
		0b0001010000000000000000000000000000000000000000000000000000000000,
		0b0010100000000000000000000000000000000000000000000000000000000000,
		0b0101000000000000000000000000000000000000000000000000000000000000,
		0b1010000000000000000000000000000000000000000000000000000000000000,
		0b0100000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000
	},
	{
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000000,
		0b0000000000000000000000000000000000000000000000000000000000000010,
		0b0000000000000000000000000000000000000000000000000000000000000101,
		0b0000000000000000000000000000000000000000000000000000000000001010,
		0b0000000000000000000000000000000000000000000000000000000000010100,
		0b0000000000000000000000000000000000000000000000000000000000101000,
		0b0000000000000000000000000000000000000000000000000000000001010000,
		0b0000000000000000000000000000000000000000000000000000000010100000,
		0b0000000000000000000000000000000000000000000000000000000001000000,
		0b0000000000000000000000000000000000000000000000000000001000000000,
		0b0000000000000000000000000000000000000000000000000000010100000000,
		0b0000000000000000000000000000000000000000000000000000101000000000,
		0b0000000000000000000000000000000000000000000000000001010000000000,
		0b0000000000000000000000000000000000000000000000000010100000000000,
		0b0000000000000000000000000000000000000000000000000101000000000000,
		0b0000000000000000000000000000000000000000000000001010000000000000,
		0b0000000000000000000000000000000000000000000000000100000000000000,
		0b0000000000000000000000000000000000000000000000100000000000000000,
		0b0000000000000000000000000000000000000000000001010000000000000000,
		0b0000000000000000000000000000000000000000000010100000000000000000,
		0b0000000000000000000000000000000000000000000101000000000000000000,
		0b0000000000000000000000000000000000000000001010000000000000000000,
		0b0000000000000000000000000000000000000000010100000000000000000000,
		0b0000000000000000000000000000000000000000101000000000000000000000,
		0b0000000000000000000000000000000000000000010000000000000000000000,
		0b0000000000000000000000000000000000000010000000000000000000000000,
		0b0000000000000000000000000000000000000101000000000000000000000000,
		0b0000000000000000000000000000000000001010000000000000000000000000,
		0b0000000000000000000000000000000000010100000000000000000000000000,
		0b0000000000000000000000000000000000101000000000000000000000000000,
		0b0000000000000000000000000000000001010000000000000000000000000000,
		0b0000000000000000000000000000000010100000000000000000000000000000,
		0b0000000000000000000000000000000001000000000000000000000000000000,
		0b0000000000000000000000000000001000000000000000000000000000000000,
		0b0000000000000000000000000000010100000000000000000000000000000000,
		0b0000000000000000000000000000101000000000000000000000000000000000,
		0b0000000000000000000000000001010000000000000000000000000000000000,
		0b0000000000000000000000000010100000000000000000000000000000000000,
		0b0000000000000000000000000101000000000000000000000000000000000000,
		0b0000000000000000000000001010000000000000000000000000000000000000,
		0b0000000000000000000000000100000000000000000000000000000000000000,
		0b0000000000000000000000100000000000000000000000000000000000000000,
		0b0000000000000000000001010000000000000000000000000000000000000000,
		0b0000000000000000000010100000000000000000000000000000000000000000,
		0b0000000000000000000101000000000000000000000000000000000000000000,
		0b0000000000000000001010000000000000000000000000000000000000000000,
		0b0000000000000000010100000000000000000000000000000000000000000000,
		0b0000000000000000101000000000000000000000000000000000000000000000,
		0b0000000000000000010000000000000000000000000000000000000000000000,
		0b0000000000000010000000000000000000000000000000000000000000000000,
		0b0000000000000101000000000000000000000000000000000000000000000000,
		0b0000000000001010000000000000000000000000000000000000000000000000,
		0b0000000000010100000000000000000000000000000000000000000000000000,
		0b0000000000101000000000000000000000000000000000000000000000000000,
		0b0000000001010000000000000000000000000000000000000000000000000000,
		0b0000000010100000000000000000000000000000000000000000000000000000,
		0b0000000001000000000000000000000000000000000000000000000000000000
	}
};
void init_pawn_attacks() {
	for (int side = BLACK; side <= WHITE; side++)
		for (int position = a8; position <= h1; position++)
			pawn_attack_maps[side][position] = get_pawn_attack(side, position);
}
uint64_t get_pawn_attack(int side, int position) {
	uint64_t attacks = 0ull;
	uint64_t piece_position = bitmask(position);
	switch (side)
	{
	case BLACK:
		//south-west
		if ((piece_position << 7) & ~right_edge)
			attacks |= piece_position << 7;
		//south-east
		if ((piece_position << 9) & ~left_edge)
			attacks |= piece_position << 9;
		break;
	case WHITE:
		//north-west
		if ((piece_position >> 9) & ~right_edge)
			attacks |= piece_position >> 9;
		//north-east
		if ((piece_position >> 7) & ~left_edge)
			attacks |= piece_position >> 7;
		break;
	}
	return attacks;
}
//|--------------------------------------------------------|
//|********************************************************|
//|							Kings						   |
//|********************************************************|
//|--------------------------------------------------------|
uint64_t king_attack_maps[64] = {
	0b0000000000000000000000000000000000000000000000000000001100000010,
	0b0000000000000000000000000000000000000000000000000000011100000101,
	0b0000000000000000000000000000000000000000000000000000111000001010,
	0b0000000000000000000000000000000000000000000000000001110000010100,
	0b0000000000000000000000000000000000000000000000000011100000101000,
	0b0000000000000000000000000000000000000000000000000111000001010000,
	0b0000000000000000000000000000000000000000000000001110000010100000,
	0b0000000000000000000000000000000000000000000000001100000001000000,
	0b0000000000000000000000000000000000000000000000110000001000000011,
	0b0000000000000000000000000000000000000000000001110000010100000111,
	0b0000000000000000000000000000000000000000000011100000101000001110,
	0b0000000000000000000000000000000000000000000111000001010000011100,
	0b0000000000000000000000000000000000000000001110000010100000111000,
	0b0000000000000000000000000000000000000000011100000101000001110000,
	0b0000000000000000000000000000000000000000111000001010000011100000,
	0b0000000000000000000000000000000000000000110000000100000011000000,
	0b0000000000000000000000000000000000000011000000100000001100000000,
	0b0000000000000000000000000000000000000111000001010000011100000000,
	0b0000000000000000000000000000000000001110000010100000111000000000,
	0b0000000000000000000000000000000000011100000101000001110000000000,
	0b0000000000000000000000000000000000111000001010000011100000000000,
	0b0000000000000000000000000000000001110000010100000111000000000000,
	0b0000000000000000000000000000000011100000101000001110000000000000,
	0b0000000000000000000000000000000011000000010000001100000000000000,
	0b0000000000000000000000000000001100000010000000110000000000000000,
	0b0000000000000000000000000000011100000101000001110000000000000000,
	0b0000000000000000000000000000111000001010000011100000000000000000,
	0b0000000000000000000000000001110000010100000111000000000000000000,
	0b0000000000000000000000000011100000101000001110000000000000000000,
	0b0000000000000000000000000111000001010000011100000000000000000000,
	0b0000000000000000000000001110000010100000111000000000000000000000,
	0b0000000000000000000000001100000001000000110000000000000000000000,
	0b0000000000000000000000110000001000000011000000000000000000000000,
	0b0000000000000000000001110000010100000111000000000000000000000000,
	0b0000000000000000000011100000101000001110000000000000000000000000,
	0b0000000000000000000111000001010000011100000000000000000000000000,
	0b0000000000000000001110000010100000111000000000000000000000000000,
	0b0000000000000000011100000101000001110000000000000000000000000000,
	0b0000000000000000111000001010000011100000000000000000000000000000,
	0b0000000000000000110000000100000011000000000000000000000000000000,
	0b0000000000000011000000100000001100000000000000000000000000000000,
	0b0000000000000111000001010000011100000000000000000000000000000000,
	0b0000000000001110000010100000111000000000000000000000000000000000,
	0b0000000000011100000101000001110000000000000000000000000000000000,
	0b0000000000111000001010000011100000000000000000000000000000000000,
	0b0000000001110000010100000111000000000000000000000000000000000000,
	0b0000000011100000101000001110000000000000000000000000000000000000,
	0b0000000011000000010000001100000000000000000000000000000000000000,
	0b0000001100000010000000110000000000000000000000000000000000000000,
	0b0000011100000101000001110000000000000000000000000000000000000000,
	0b0000111000001010000011100000000000000000000000000000000000000000,
	0b0001110000010100000111000000000000000000000000000000000000000000,
	0b0011100000101000001110000000000000000000000000000000000000000000,
	0b0111000001010000011100000000000000000000000000000000000000000000,
	0b1110000010100000111000000000000000000000000000000000000000000000,
	0b1100000001000000110000000000000000000000000000000000000000000000,
	0b0000001000000011000000000000000000000000000000000000000000000000,
	0b0000010100000111000000000000000000000000000000000000000000000000,
	0b0000101000001110000000000000000000000000000000000000000000000000,
	0b0001010000011100000000000000000000000000000000000000000000000000,
	0b0010100000111000000000000000000000000000000000000000000000000000,
	0b0101000001110000000000000000000000000000000000000000000000000000,
	0b1010000011100000000000000000000000000000000000000000000000000000,
	0b0100000011000000000000000000000000000000000000000000000000000000
};
void init_king_attacks() {
	for (int position = a8; position <= h1; position++)
		king_attack_maps[position] = get_king_attack(position);
}
uint64_t get_king_attack(int position) {
	uint64_t attacks = 0ull;
	uint64_t piece_position = bitmask(position);
	//south-west
	if ((piece_position << 7) & ~right_edge)
		attacks |= piece_position << 7;
	//south-east
	if ((piece_position << 9) & ~left_edge)
		attacks |= piece_position << 9;
	//north-west
	if ((piece_position >> 9) & ~right_edge)
		attacks |= piece_position >> 9;
	//north-east
	if ((piece_position >> 7) & ~left_edge)
		attacks |= piece_position >> 7;
	//west
	if (piece_position & ~left_edge)
		attacks |= piece_position >> 1;
	//east
	if (piece_position & ~right_edge)
		attacks |= piece_position << 1;
	//north
	attacks |= piece_position >> 8;
	attacks |= piece_position << 8;
	return attacks;
}
//|--------------------------------------------------------|
//|********************************************************|
//|							Knights						   |
//|********************************************************|
//|--------------------------------------------------------|
uint64_t knight_attack_maps[64] = {
	0b0000000000000000000000000000000000000000000000100000010000000000,
	0b0000000000000000000000000000000000000000000001010000100000000000,
	0b0000000000000000000000000000000000000000000010100001000100000000,
	0b0000000000000000000000000000000000000000000101000010001000000000,
	0b0000000000000000000000000000000000000000001010000100010000000000,
	0b0000000000000000000000000000000000000000010100001000100000000000,
	0b0000000000000000000000000000000000000000101000000001000000000000,
	0b0000000000000000000000000000000000000000010000000010000000000000,
	0b0000000000000000000000000000000000000010000001000000000000000100,
	0b0000000000000000000000000000000000000101000010000000000000001000,
	0b0000000000000000000000000000000000001010000100010000000000010001,
	0b0000000000000000000000000000000000010100001000100000000000100010,
	0b0000000000000000000000000000000000101000010001000000000001000100,
	0b0000000000000000000000000000000001010000100010000000000010001000,
	0b0000000000000000000000000000000010100000000100000000000000010000,
	0b0000000000000000000000000000000001000000001000000000000000100000,
	0b0000000000000000000000000000001000000100000000000000010000000010,
	0b0000000000000000000000000000010100001000000000000000100000000101,
	0b0000000000000000000000000000101000010001000000000001000100001010,
	0b0000000000000000000000000001010000100010000000000010001000010100,
	0b0000000000000000000000000010100001000100000000000100010000101000,
	0b0000000000000000000000000101000010001000000000001000100001010000,
	0b0000000000000000000000001010000000010000000000000001000010100000,
	0b0000000000000000000000000100000000100000000000000010000001000000,
	0b0000000000000000000000100000010000000000000001000000001000000000,
	0b0000000000000000000001010000100000000000000010000000010100000000,
	0b0000000000000000000010100001000100000000000100010000101000000000,
	0b0000000000000000000101000010001000000000001000100001010000000000,
	0b0000000000000000001010000100010000000000010001000010100000000000,
	0b0000000000000000010100001000100000000000100010000101000000000000,
	0b0000000000000000101000000001000000000000000100001010000000000000,
	0b0000000000000000010000000010000000000000001000000100000000000000,
	0b0000000000000010000001000000000000000100000000100000000000000000,
	0b0000000000000101000010000000000000001000000001010000000000000000,
	0b0000000000001010000100010000000000010001000010100000000000000000,
	0b0000000000010100001000100000000000100010000101000000000000000000,
	0b0000000000101000010001000000000001000100001010000000000000000000,
	0b0000000001010000100010000000000010001000010100000000000000000000,
	0b0000000010100000000100000000000000010000101000000000000000000000,
	0b0000000001000000001000000000000000100000010000000000000000000000,
	0b0000001000000100000000000000010000000010000000000000000000000000,
	0b0000010100001000000000000000100000000101000000000000000000000000,
	0b0000101000010001000000000001000100001010000000000000000000000000,
	0b0001010000100010000000000010001000010100000000000000000000000000,
	0b0010100001000100000000000100010000101000000000000000000000000000,
	0b0101000010001000000000001000100001010000000000000000000000000000,
	0b1010000000010000000000000001000010100000000000000000000000000000,
	0b0100000000100000000000000010000001000000000000000000000000000000,
	0b0000010000000000000001000000001000000000000000000000000000000000,
	0b0000100000000000000010000000010100000000000000000000000000000000,
	0b0001000100000000000100010000101000000000000000000000000000000000,
	0b0010001000000000001000100001010000000000000000000000000000000000,
	0b0100010000000000010001000010100000000000000000000000000000000000,
	0b1000100000000000100010000101000000000000000000000000000000000000,
	0b0001000000000000000100001010000000000000000000000000000000000000,
	0b0010000000000000001000000100000000000000000000000000000000000000,
	0b0000000000000100000000100000000000000000000000000000000000000000,
	0b0000000000001000000001010000000000000000000000000000000000000000,
	0b0000000000010001000010100000000000000000000000000000000000000000,
	0b0000000000100010000101000000000000000000000000000000000000000000,
	0b0000000001000100001010000000000000000000000000000000000000000000,
	0b0000000010001000010100000000000000000000000000000000000000000000,
	0b0000000000010000101000000000000000000000000000000000000000000000,
	0b0000000000100000010000000000000000000000000000000000000000000000
};
void init_knight_attacks() {
	for (int position = a8; position <= h1; position++)
		knight_attack_maps[position] = get_knight_attack(position);
}
uint64_t get_knight_attack(int position) {
	uint64_t attacks = 0ull;
	uint64_t piece_position = bitmask(position);
	//south-west
	if ((piece_position << 6) & ~(right_edge | before_right_edge))
		attacks |= piece_position << 6;
	//south-east
	if ((piece_position << 10) & ~(left_edge | before_left_edge))
		attacks |= piece_position << 10;
	//north-west
	if ((piece_position >> 10) & ~(right_edge | before_right_edge))
		attacks |= piece_position >> 10;
	//north-east
	if ((piece_position >> 6) & ~(left_edge | before_left_edge))
		attacks |= piece_position >> 6;
	//south-west-south
	if ((piece_position << 15) & ~right_edge)
		attacks |= piece_position << 15;
	//south-east-south
	if ((piece_position << 17) & ~left_edge)
		attacks |= piece_position << 17;
	//north-west-north
	if ((piece_position >> 17) & ~right_edge)
		attacks |= piece_position >> 17;
	//north-east-north
	if ((piece_position >> 15) & ~left_edge)
		attacks |= piece_position >> 15;
	return attacks;
}
//|--------------------------------------------------------|
//|********************************************************|
//|							Rooks						   |
//|********************************************************|
//|--------------------------------------------------------|
int rook_attack_count[64] = {
	12,11,11,11,11,11,11,12,
	11,10,10,10,10,10,10,11,
	11,10,10,10,10,10,10,11,
	11,10,10,10,10,10,10,11,
	11,10,10,10,10,10,10,11,
	11,10,10,10,10,10,10,11,
	11,10,10,10,10,10,10,11,
	12,11,11,11,11,11,11,12 
};
void init_rook_attack_mask() {
	init_rook_attack_count();
}
void init_rook_attack_count() {
	for (int position = a8; position <= h1; position++)
		rook_attack_count[position] = count_set_bits(get_rook_attak_mask_exc_ends(bitmask(position)));
}
uint64_t get_rook_attak_mask_exc_ends(uint64_t piecePosition) {
	uint64_t attack_mask = 0ull;
	int row = (log2(piecePosition) / 8);
	int col = ((int)(log2(piecePosition)) % 8);
	//north moves
	for (int rank = row + 1; rank <= 6; rank++)
		attack_mask |= (1ull << (rank * 8 + col));
	//south moves
	for (int rank = row - 1; rank >= 1; rank--)
		attack_mask |= (1ull << (rank * 8 + col));
	//east moves
	for (int file = col - 1; file >= 1; file--)
		attack_mask |= (1ull << (row * 8 + file));
	//west moves
	for (int file = col + 1; file <= 6; file++)
		attack_mask |= (1ull << (row * 8 + file));
	return attack_mask;
}
uint64_t get_rook_attak_mask_inc_end_blockers(uint64_t piecePosition, uint64_t blockers_board) {
	uint64_t attack_mask = 0ull;
	int row = (log2(piecePosition) / 8);
	int col = ((int)(log2(piecePosition)) % 8);
	//north moves
	for (int rank = row + 1; rank <= 7; rank++) {
		attack_mask |= (1ull << (rank * 8 + col));
		if (blockers_board & (1ull << (rank * 8 + col)))
			break;
	}
	//south moves
	for (int rank = row - 1; rank >= 0; rank--) {
		attack_mask |= (1ull << (rank * 8 + col));
		if (blockers_board & (1ull << (rank * 8 + col)))
			break;
	}
	//east moves
	for (int file = col - 1; file >= 0; file--) {
		attack_mask |= (1ull << (row * 8 + file));
		if (blockers_board & (1ull << (row * 8 + file)))
			break;
	}
	//west moves
	for (int file = col + 1; file <= 7; file++) {
		attack_mask |= (1ull << (row * 8 + file));
		if (blockers_board & (1ull << (row * 8 + file)))
			break;
	}
	return attack_mask;
}
uint64_t get_rook_attacks(int position, uint64_t occupancy) {
	occupancy &= rook_attacks[position];
	occupancy *= rook_magic_number[position];
	occupancy >>= (64 - rook_attack_count[position]);
	return rook_attacks_table[position][occupancy];
}
//|--------------------------------------------------------|
//|********************************************************|
//|							Bishops						   |
//|********************************************************|
//|--------------------------------------------------------|
int bishop_attack_count[64] = {
	6,5,5,5,5,5,5,6,
	5,5,5,5,5,5,5,5,
	5,5,7,7,7,7,5,5,
	5,5,7,9,9,7,5,5,
	5,5,7,9,9,7,5,5,
	5,5,7,7,7,7,5,5,
	5,5,5,5,5,5,5,5,
	6,5,5,5,5,5,5,6
};
void init_bishop_attack_mask() {
	init_bishop_attack_count();
}
void init_bishop_attack_count() {
	for (int position = a8; position <= h1; position++)
		bishop_attack_count[position] = count_set_bits(get_bishop_attak_mask_exc_ends(bitmask(position)));
}
uint64_t get_bishop_attak_mask_exc_ends(uint64_t piecePosition) {
	uint64_t attack_mask = 0ull;
	int row = (log2(piecePosition) / 8);
	int col = ((int)(log2(piecePosition)) % 8);
	//north-east moves
	for (int rank = row + 1, file = col - 1; rank <= 6 && file >= 1; rank++, file--)
		attack_mask |= (1ull << (rank * 8 + file));
	//north-west moves
	for (int rank = row + 1, file = col + 1; rank <= 6 && file <= 6; rank++, file++)
		attack_mask |= (1ull << (rank * 8 + file));
	//south-east moves
	for (int rank = row - 1, file = col - 1; rank >= 1 && file >= 1; rank--, file--)
		attack_mask |= (1ull << (rank * 8 + file));
	//south-west moves
	for (int rank = row - 1, file = col + 1; rank >= 1 && file <= 6; rank--, file++)
		attack_mask |= (1ull << (rank * 8 + file));
	return attack_mask;
}
uint64_t get_bishop_attak_mask_inc_end_blockers(uint64_t piecePosition, uint64_t blockers_board) {
	uint64_t attack_mask = 0ull;
	int row = (log2(piecePosition) / 8);
	int col = ((int)(log2(piecePosition)) % 8);
	//north-east moves
	for (int rank = row + 1, file = col - 1; rank <= 7 && file >= 0; rank++, file--) {
		attack_mask |= (1ull << (rank * 8 + file));
		if (blockers_board & (1ull << (rank * 8 + file)))
			break;
	}
	//north-west moves
	for (int rank = row + 1, file = col + 1; rank <= 7 && file <= 7; rank++, file++) {
		attack_mask |= (1ull << (rank * 8 + file));
		if (blockers_board & (1ull << (rank * 8 + file)))
			break;
	}
	//south-east moves
	for (int rank = row - 1, file = col - 1; rank >= 0 && file >= 0; rank--, file--) {
		attack_mask |= (1ull << (rank * 8 + file));
		if (blockers_board & (1ull << (rank * 8 + file)))
			break;
	}
	//south-west moves
	for (int rank = row - 1, file = col + 1; rank >= 0 && file <= 7; rank--, file++) {
		attack_mask |= (1ull << (rank * 8 + file));
		if (blockers_board & (1ull << (rank * 8 + file)))
			break;
	}
	return attack_mask;
}
uint64_t get_bishop_attacks(int position, uint64_t occupancy) {
	uint64_t b = bishop_magic_number[position];
	occupancy &= bishop_attacks[position];
	occupancy *= bishop_magic_number[position];
	occupancy >>= (64l - bishop_attack_count[position]);
	return bishop_attacks_table[position][occupancy];
}

uint64_t get_queen_attacks(int position, uint64_t blockers) {
	return get_rook_attacks(position, blockers) | get_bishop_attacks(position, blockers);
}